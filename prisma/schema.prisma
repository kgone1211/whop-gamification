// Prisma schema for Whop Gamification System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  OWNER
  COACH
  MEMBER
  FREE
}

model User {
  id            String   @id @default(cuid())
  whopUserId    String   @unique
  email         String?
  displayName   String?
  avatarUrl     String?
  membershipId  String?
  workspaceId   String?
  role          Role     @default(FREE)
  points        Int      @default(0)
  level         Int      @default(1)
  streakDays    Int      @default(0)
  longestStreak Int      @default(0)
  lastLoginAt   DateTime?
  lastActiveAt  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  earnedBadges  BadgeEarned[]
  events        Event[]
  progress      Progress[]

  @@index([workspaceId])
  @@index([points])
  @@index([level])
}

model Event {
  id        String   @id @default(cuid())
  userId    String
  type      String
  meta      Json?
  points    Int      @default(0)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, createdAt])
  @@index([createdAt])
}

model Badge {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String
  icon        String
  rule        Json
  createdAt   DateTime @default(now())

  earnedBy BadgeEarned[]
}

model BadgeEarned {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  contentId   String
  contentType String
  status      String
  percent     Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId, contentId])
  @@index([status])
}

model Rule {
  id        String   @id @default(cuid())
  kind      String
  slug      String   @unique
  name      String
  config    Json
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([kind, active])
}
